{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","createThought","thought","prompt","axios","post","then","res","setState","thoughts","state","data","newThought","catch","err","alert","JSON","stringify","deleteThoughts","window","confirm","delete","seedThoughts","get","this","className","onClick","map","thoughtModel","style","listStyleType","margin","borderBottom","key","_id","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"mUA4EeA,E,kDAvEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAqCRC,cAAgB,WACd,IAAMC,EAAUC,OAAO,wBAClBD,GACLE,IACGC,KAAK,uBAAwB,CAAEH,YAC/BI,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAS,GAAD,mBAAM,EAAKC,MAAMD,UAAjB,CAA2BF,EAAII,KAAKC,kBACxEC,OAAM,SAAAC,GAAG,OAAIC,MAAM,6BAAD,OAA8BC,KAAKC,UAAUH,SA5CjD,EA+CnBI,eAAiB,WACEC,OAAOC,QAAQ,yBAEhChB,IACGiB,OAAO,kBACPf,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAU,QACtCI,OAAM,SAAAC,GAAG,OAAIC,MAAM,kCAAD,OAAmCC,KAAKC,UAAUH,SArDtD,EAwDnBQ,aAAe,WACEH,OAAOC,QAAQ,qCAE9BhB,IACGC,KAAK,qBAAsB,IAC3BC,MAAK,WACJF,IACGmB,IAAI,kBACJjB,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAUF,EAAII,UAC1CE,MAAME,UAEVF,MAAME,QAjET,EAAKL,MAAQ,CACXD,SAAU,IAHK,E,gEAOE,IAAD,OAClBL,IACGmB,IAAI,kBACJjB,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAUF,EAAII,UAC1CE,MAAME,S,+BAGD,IACAN,EAAae,KAAKd,MAAlBD,SAER,OACE,yBAAKgB,UAAU,OAEb,4BAAQC,QAASF,KAAKvB,eAAtB,kBACA,4BAAQyB,QAASF,KAAKN,gBAAtB,mBACA,4BAAQQ,QAASF,KAAKF,cAAtB,iBAEA,4BACGb,EAASkB,KAAI,SAAAC,GAAY,OACxB,wBACEC,MAAO,CAAEC,cAAe,OAAQC,OAAQ,OAAQC,aAAc,mBAC9DC,IAAKL,EAAaM,KAEjBN,EAAa1B,kB,GA/BViC,aCQEC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cb95e7d5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thoughts: [],\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get('/api/thoughts/')\n      .then(res => this.setState({ thoughts: res.data }))\n      .catch(alert);\n  }\n\n  render() {\n    const { thoughts } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* Buttons to interact with API */}\n        <button onClick={this.createThought}>Create Thought</button>\n        <button onClick={this.deleteThoughts}>Delete Thoughts</button>\n        <button onClick={this.seedThoughts}>Seed Thoughts</button>\n        {/* List of thoughts in Cosmos DB */}\n        <ul>\n          {thoughts.map(thoughtModel => (\n            <li\n              style={{ listStyleType: 'none', margin: '20px', borderBottom: '1px solid black' }}\n              key={thoughtModel._id}\n            >\n              {thoughtModel.thought}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n  createThought = () => {\n    const thought = prompt('Enter your thought: ');\n    if (!thought) return;\n    axios\n      .post('/api/thoughts/create', { thought })\n      .then(res => this.setState({ thoughts: [...this.state.thoughts, res.data.newThought] }))\n      .catch(err => alert(`Failed to create thought\\n${JSON.stringify(err)}`));\n  };\n\n  deleteThoughts = () => {\n    const doDelete = window.confirm('Delete all Thoughts?');\n    if (!doDelete) return;\n    axios\n      .delete('/api/thoughts/')\n      .then(res => this.setState({ thoughts: [] }))\n      .catch(err => alert(`Failed to delete all thoughts\\n${JSON.stringify(err)}`));\n  };\n\n  seedThoughts = () => {\n    const doSeed = window.confirm('Do you want to seed random data?');\n    if (!doSeed) return;\n    axios\n      .post('/api/thoughts/seed', {})\n      .then(() => {\n        axios\n          .get('/api/thoughts/')\n          .then(res => this.setState({ thoughts: res.data }))\n          .catch(alert);\n      })\n      .catch(alert);\n  };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}